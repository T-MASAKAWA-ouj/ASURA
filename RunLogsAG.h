#include "config.h"
static void WriteMakeflagsAG(char Fname[]){

    FILE *fp;
    FileOpen(fp,Fname,"w");

    fprintf(fp,"# Auto generation in %s\n",__DATE__);

    fprintf(fp,"#\n");
    fprintf(fp,"# makeflags for ASURA.\n");
    fprintf(fp,"#\n");
    fprintf(fp,"#______________________Version information\n");
    fprintf(fp,"OPTIONS     +=      -DASURA_MAJOR_VERSION=3\n");
    fprintf(fp,"OPTIONS     +=      -DASURA_MINOR_VERSION=5\n");
    fprintf(fp,"OPTIONS     +=      -DASURA_MICRO_VERSION=5\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For debug\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_DEBUG_MODE\n");
    fprintf(fp,"OPTIONS     +=      -DDEBUG_LEVEL=0\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For data structures\n");
    fprintf(fp,"#OPTIONS     +=      -DDATAFORMAT=0 \n");
    fprintf(fp,"#if an old type data format is necessary, you have to set the flag > 0\n");
    fprintf(fp,"OPTIONS     +=      -DPARTICLE_SORT_TYPE=SORT_MORTON # SORT_MORTON or SORT_TIMESTEP\n");
    fprintf(fp,"#OPTIONS     +=      -DPARTICLE_SORT_TYPE=SORT_TIMESTEP # SORT_MORTON or SORT_TIMESTEP\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For IO\n");
    fprintf(fp,"OPTIONS     +=      -DHEADER_SIZE=256  # size of header, HEADER_SIZE*sizeof(int)\n");
    fprintf(fp,"#OPTIONS     +=      -DCOMPACT_IO_FORMAT # Remove unnecessary data. This flag also changes input parts.\n");
    fprintf(fp,"OPTIONS     +=      -DCOMPACT_DOUBLE_IO_FORMAT # Remove unnecessary data. This flag also changes input parts.\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_LEAN_IO_FORMAT # Use lean format.\n");
    fprintf(fp,"OPTIONS     +=      -DLEAN_IO_FORMAT_FULL_IO_INTERVAL=10 # Full IO interval for the case with the Lean format.\n");
    fprintf(fp,"OPTIONS     +=      -DOUTPUT_CONSTANT_INTERVAL  #\n");
    fprintf(fp,"OPTIONS     +=      -DDATA_DUMP_INTERVAL=30.0  # in unit of minute.\n");
    fprintf(fp,"#OPTIONS     +=      -DDATA_DUMP_INTERVAL=1.0  # in unit of minute.\n");
    fprintf(fp,"#OPTIONS     +=      -DSTOP_AFTER_DATA_DUMP   # if this flag is used, simulation stops after data dump.\n");
    fprintf(fp,"OPTIONS     +=      -DASCIIDATA_DUMP_INTERVAL=60.0  # in unit of minute.\n");
    fprintf(fp,"#OPTIONS     +=      -DASCIIDATA_DUMP_INTERVAL=0.5  # in unit of minute.\n");
    fprintf(fp,"OPTIONS     +=      -DWRITE_ALLDATA_AT_ONCE      # IO timing.\n");
    fprintf(fp,"OPTIONS     +=      -DLOCK_FILE_ID=12345         # LOCK_FILE_ID. Any integer number is ok.\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For run\n");
    fprintf(fp,"#OPTIONS    +=      -DPERIODIC_RUN\n");
    fprintf(fp,"#OPTIONS    +=      -DCOSMOLOGICAL_RUN\n");
    fprintf(fp,"#OPTIONS    +=      -DISOTHERMAL_EOS_RUN\n");
    fprintf(fp,"#OPTIONS    +=      -DBAROTROPIC_EOS_RUN\n");
    fprintf(fp,"OPTIONS    +=      -DGRAVITY_RUN\n");
    fprintf(fp,"OPTIONS    +=      -DHYDRO_RUN\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For boundary condition\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_BOUNDARY_CONDITION\n");
    fprintf(fp,"OPTIONS     +=      -DBOUNDARY_CONDITION_TYPE=3\n");
    fprintf(fp,"OPTIONS     +=      -DBOUNDARY_CONDITION_SPHERICAL_SHELL_EDGE=4.0*MPC_CGS\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For time step\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_VARIABLE_TIMESTEP # Use variable time-steps\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_INDIVIDUAL_TIMESTEP # Use individual time-steps\n");
    fprintf(fp,"#OPTIONS     +=      -DMAXIMUM_TIME_HIERARCHY=0 # dt_max = 2^MAXIMUM_TIME_HIERARCHY * dt_min\n");
    fprintf(fp,"OPTIONS     +=      -DMAXIMUM_TIME_HIERARCHY=31 # dt_max = 2^MAXIMUM_TIME_HIERARCHY * dt_min\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_FAST_SCHEME #  FAST flag.\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_ACC_DOT_TIMESTEP   # Use a_dot to evaluate time-steps\n");
    fprintf(fp,"OPTIONS     +=      -DHYDRO_TIMESTEP_LIMITER # Hydro time-step limiter.\n");
    fprintf(fp,"OPTIONS     +=      -DMAX_K_LOCAL=2 # Limit dt_hydro <= 2^THIS_PARAM * dt_hydro_localmin.\n");
    fprintf(fp,"OPTIONS     +=      -DMAX_K_GRAVITY=10 # Limit dt_gravity <= 2^THIS_PARAM * dt_hdyro. If 0, omit this function.\n");
    fprintf(fp,"OPTIONS     +=      -DUPDATE_TIMESTEP_IN_HEATEDREGION # When SNe inject the thermal energy\n");
    fprintf(fp,"                    #into gas particles, shrink their time-steps (REUSE THE TIME STEP LIMITER).\n");
    fprintf(fp,"#OPTIONS     +=      -DDTMAX_RESCALE_FACTOR=1.0 #\n");
    fprintf(fp,"OPTIONS     +=      -DDTMAX_RESCALE_LIMIT_KMAX=8 #\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_TIMESTEP_PREDICTOR_CHANGE # Use time-steps based on kernel size changes.\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For decomposition\n");
    fprintf(fp,"#OPTIONS     +=      -DPREDECOMPOSITION_INTERVAL_STEPS=200\n");
    fprintf(fp,"#OPTIONS     +=      -DPREDECOMPOSITION_SAMPLING_NUMBER=30\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_INTERACTIONLIST_FOR_PREDECOMPOSITION_SAMPLING\n");
    fprintf(fp,"OPTIONS     +=      -DPREDECOMPOSITION_SAMPLING_NUMBER=200\n");
    fprintf(fp,"OPTIONS     +=      -DDECOMPOSITION_MAX_ITERATION_TIMES=100\n");
    fprintf(fp,"OPTIONS     +=      -DDECOMPOSITION_FREQUENCY=32\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For gravity\n");
    fprintf(fp,"OPTIONS     +=      -DGRAPE_HOLDING_TIME_IN_SEC=60.0 # unit : sec\n");
    fprintf(fp,"OPTIONS     +=      -DMINIMUM_MASS_FACTOR_FOR_GRAPE=64.0\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_SHIFT_GRAVITYFIELD  # This flag shifts particless so that particles who share an interaction list are being the center of coordinates.\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_SYMMETRIZED_SOFTENING  # Adopt mass weighted softening for a tree node.\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For hydro tree\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For hydro\n");
    fprintf(fp,"OPTIONS    +=       -DEVALUATE_SIZES_ALL_TOGETHER # Sizes for SPH kernels, stromgren radii and feedback radii are evaluated all together.\n");
    fprintf(fp,"OPTIONS    +=       -DUSE_DISPH # Use the density independent SPH (Saitoh & Makino 2013)\n");
    fprintf(fp,"#OPTIONS    +=       -DUSE_SPSPH # Use the smoothed pseud-density SPH (Yamamoto, Saitoh & Makino 2014)\n");
    fprintf(fp,"OPTIONS    +=       -DSPSPH_DIFFUSION_FACTOR=0.1 # Diffusion factor for SPSPH.\n");
    fprintf(fp,"OPTIONS    +=       -DUSE_GRAD_H # Use the grad-h term\n");
    fprintf(fp,"OPTIONS    +=       -DUSE_GRAD_N # Use an advanced grad-h term (Hopkins 2013).\n");
    fprintf(fp,"                                 # USE_GRAD_H flag is necessary to work this flag.\n");
    fprintf(fp,"                                 # If this flag is on, the result of 1D shocktube has a little offset from the analytic solution.\n");
    fprintf(fp,"OPTIONS    +=       -DKERNEL_TYPE=2  # 0=Spline, 1=WC2, 2=WC4, 3=WC6\n");
    fprintf(fp,"OPTIONS    +=       -DWRITE_KERNEL_SHAPE \n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_NEIGHBOR_LIST\n");
    fprintf(fp,"OPTIONS     +=      -DMAX_NEIGHBOR_SIZE=32768\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_SMOOTHED_NEIGHBOR_NUMBER\n");
    fprintf(fp,"OPTIONS     +=      -DEVALUATE_KERNEL_BY_ITERATION  # if off, h = KERNEL_FACTOR*(m/\rho)\n");
    fprintf(fp,"OPTIONS     +=      -DKERNEL_FACTOR=1.2\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_MINIMUM_KERNEL_SIZE\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_MAXIMUM_KERNEL_SIZE\n");
    fprintf(fp,"#OPTIONS     +=      -DMAXIMUM_KERNEL_SIZE=1000*KPC_CGS # unit : Kpc\n");
    fprintf(fp,"#OPTIONS     +=      -DITERATIVE_APPROACH_FOR_NEIGHBOR_SEARCH # In order to get the complite neighbor list...\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_KERNEL_LOCAL_UPDATE # Adopt local update for accelerate the kernel size estimate\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_PARTICLE_TAG # allow to use a particle tag for each particle.\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For hydro artificial viscosity\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_VARIABLE_ALPHA\n");
    fprintf(fp,"OPTIONS     +=      -DSIGNAL_VELOCITY_BETA=3.0\n");
    fprintf(fp,"OPTIONS     +=      -DVISCOSITY_TYPE=0 # 0: Standard Visc, 1: Hosono type Visc.\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For equation of state\n");
    fprintf(fp,"OPTIONS    +=      -DCRITICAL_DENSITY_FOR_BAROTROPIC_RUN=1.e-13 # unit : g/cm^-3\n");
    fprintf(fp,"OPTIONS    +=      -DSOUND_VELOCITY_FOR_BAROTROPIC_RUN=1.84e+4 # unit : cm/s\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For cooling and heating\n");
    fprintf(fp,"OPTIONS     +=      -DCOOLING_RUN # select one of three flags in below.\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_COOLING_ENERGYLOSS_LIMIT # Energy loss in dt is limited by 1/2 of the original Energy.\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_CLOUDY_COOLING_FUNCTIONS  # use Cloudy coolings.\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_SPAANS1997_COOLING_FUNCTIONS # use Spaans & Norman (1997)\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_SPAANS2008_COOLING_FUNCTIONS # use Spaans et al. (2008)\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_INVERSE_COMPTON_COOLING # C.C. for Spaans' cooling functions\n");
    fprintf(fp,"OPTIONS     +=      -DMOLECULAR_COOLING #if \n");
    fprintf(fp,"#OPTIONS     +=      -DCOOLING_CUTOFF_TEMPERATURE=500.0 # if ordinary case, you have to use 10.0\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_FARULTRAVIOLET_HEATING\n");
    fprintf(fp,"OPTIONS     +=      -DFARULTRAVIOLET_HEATING_CUTOFF #if on, FUV field has a cut off T of 10^4 K.\n");
    fprintf(fp,"OPTIONS     +=      -DFUV_G0=10.0\n");
    fprintf(fp,"#OPTIONS     +=      -DINITIAL_SKIP_COOLING_ROUTINE=5.e+7*YEAR_CGS # unit : yr\n");
    fprintf(fp,"OPTIONS     +=      -DINITIAL_SKIP_COOLING_ROUTINE=0*5.e+5*YEAR_CGS # unit : yr\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_MAXIMUM_TEMPERATURE # if this flag is on, the max T is introduced.\n");
    fprintf(fp,"OPTIONS     +=      -DMAXIMUM_TEMPERATURE=1.e9 # The max T \n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For thermal conductivity\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_THERMAL_CONDUCTIVITY\n");
    fprintf(fp,"OPTIONS     +=      -DTHERMAL_CONDUCTIVITY_COEF_TYPE=0 #0=Parker 1953, 1=Spitzer\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_THERMAL_CONDUCTIVITY_TIMESTEP\n");
    fprintf(fp,"OPTIONS     +=      -DTHERMAL_CONDUCTIVITY_TIMESTEP_FACTOR=0.5\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For star formation\n");
    fprintf(fp,"OPTIONS     +=      -DSTARFORMATION\n");
    fprintf(fp,"OPTIONS     +=      -DSFCONDITION_DENSITY\n");
    fprintf(fp,"OPTIONS     +=      -DSFCONDITION_TEMPERATURE\n");
    fprintf(fp,"OPTIONS     +=      -DSFCONDITION_CONVERGING_FLOW\n");
    fprintf(fp,"OPTIONS     +=      -DSFCONDITION_HAVE_SNE_HEAT # prevent starformation for particles with DQheat > 0.e0\n");
    fprintf(fp,"\n");
    fprintf(fp,"OPTIONS     +=      -DSF_EFFICIENCY=0.033\n");
    fprintf(fp,"#OPTIONS     +=      -DSF_EFFICIENCY=0.5\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_DENSITY_CRITERION=1.e-1\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_TEMPERATURE_CRITERION=1.5e+4\n");
    fprintf(fp,"OPTIONS     +=      -DSFCONDITION_DENSITY_CRITERION=1.e+2\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_DENSITY_CRITERION=1.e+3\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_DENSITY_CRITERION=1.e+1\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_TEMPERATURE_CRITERION=1.0e+3 \n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_DENSITY_CRITERION=1.e+5\n");
    fprintf(fp,"OPTIONS     +=      -DSFCONDITION_TEMPERATURE_CRITERION=1.0e+2\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_TEMPERATURE_CRITERION=1.0e+3\n");
    fprintf(fp,"#OPTIONS     +=      -DSFCONDITION_TEMPERATURE_CRITERION=5.0e+3\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_FORCIBLE_STARFORMATION\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_FORCIBLE_STARFORMATION_DENSITY_CRITERION_FACTOR=0.01\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For SN feedback\n");
    fprintf(fp,"#OPTIONS     +=      -DDELAYED_FEEDBACK\n");
    fprintf(fp,"#OPTIONS     +=      -DMAXIMUM_ENERGY_INPUT\n");
    fprintf(fp,"OPTIONS     +=      -DSKIP_COOLING=ON\n");
    fprintf(fp,"OPTIONS     +=      -DSNII_ENERGY_EFFICIENCY=1.0\n");
    fprintf(fp,"#OPTIONS     +=      -DPRESERVE_SNII_EVENTRATE       # Preserve event rate of SNII \n");
    fprintf(fp,"         # This option works correctly only when the number of SNII in each star particle < 1.0\n");
    fprintf(fp,"OPTIONS     +=      -DSET_SNII_TEMPERATURE    # Set minimum SNII temperature\n");
    fprintf(fp,"OPTIONS     +=      -DSNII_PEAK_TEMPERATURE   # if use this flag, ASURA sets the\n");
    fprintf(fp,"         #peak temperature of a SNII region as SNII_TEMPERATURE. \n");
    fprintf(fp,"         #Otherwith it sets the mean temp as SNII_TEMPERATURE.\n");
    fprintf(fp,"#OPTIONS     +=      -DSNII_TEMPERATURE=5.e+7  # The minimum SNII temperature\n");
    fprintf(fp,"OPTIONS     +=      -DSNII_TEMPERATURE=5.e+5  # The minimum SNII temperature\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_SN_INPUT_PARTICLE_NUMBER # This option changes the input particle number for SN.\n");
    fprintf(fp,"OPTIONS     +=      -DSN_INPUT_PARTICLE_NUMBER=32  # Particle number which injects SN energy/metal.\n");
    fprintf(fp,"OPTIONS     +=      -DSN_INPUT_PARTICLE_NUMBER_MARGIN=4 # Margin for input particle number.\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For HII region\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_HIIREGION_MODEL\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For Chemical Evolution\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_CELIB\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_IMFTYPE=3 #0=Salpeter,1=DietSapleter,2=MillarScalo,3=Kroupa,4=Kennicutt,5=Chabrier\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_IMF_LOWERMASS=0.1 # Lower mass bound of the selected IMF.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_IMF_UPPERMASS=100 # Upper mass bound of the selected IMF.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_POPIII_IMF=1 #0=Not use,1=Use\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNII_YIELD_TYPE=1 #0=Portinari+1999,1=Nomoto+2013, 2=Chieffi & Limongi 2004\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNII_YIELD_MODIFICATION_P98=1 # Modifications for yields of Portinari+1999\n");
    fprintf(fp,"#OPTIONS     +=      -DCHEMICALEVOLUTION_SNII_HYPERNOVA_FRACTION=0.05 # Hypernova fraction\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNII_HYPERNOVA_FRACTION=0.00 # Hypernova fraction\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNII_LOWERMASS=8.0 # Lower mass bound of the star who results in SNII.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNII_UPPERMASS=100.0 # Upper mass bound of the star who results in SNII.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNIa_TYPE=1 # 0=GreggioRenzini+1983, 1=Maoz+2012, 2=Vogelsberger+2013\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNIa_YIELD_TYPE=2 # 0=Iamoto+1999, 1=Maeda+2010, 2=Seitenzahl+2013, 3=Travaglio+2004\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNIa_YIELD_MODEL=7 # \n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNIa_LOWERMASS=3.0 # Lower mass bound of the star who results in SNIa.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNIa_UPPERMASS=6.0 # Upper mass bound of the star who results in SNIa.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_SNIa_EVENTNUMBER=10 # This number defines the size of association of Type Ia SNe\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_CELIB_AGB  # Use AGB mode\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_AGB_BIN_TYPE=0 # 0=Linear bin, 1=Log bin\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_AGB_NBIN=100    # Number of bin for the log bin case.\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_AGB_INTERVAL=1.e8 # Time interval for the linear bin case.\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_CELIB_NSM  # Use NSM mode\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_NSM_DTD_INDEX=-1.0  #\n");
    fprintf(fp,"OPTIONS     +=      -DCHEMICALEVOLUTION_NSM_DTD_OFFSET=1.e+7  #\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_CELIB_ECSN  # Use ECSN mode\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_CELIB_ECSN_MASS_RANGE=1 #0=Not use mass range calculated by Doherty et al. (2015), 1=use\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_CELIB_HN  # Use HN mode\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For metallicity diffusion \n");
    fprintf(fp,"OPTIONS     +=      -DUSE_METAL_DIFFUSION # This function can be used when you use CELib.\n");
    fprintf(fp,"OPTIONS     +=      -DDIFFUSION_TYPE=1 # Type 0: Greif, Type 1: Shen\n");
    fprintf(fp,"OPTIONS     +=      -DTURBULENT_DIFFUSION_COEF=0.01 # Used in the case of Type 1\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________For sink particles\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_SINK_PARTICLE \n");
    fprintf(fp,"#OPTIONS     +=      -DMAKE_SINK_PARTICLE \n");
    fprintf(fp,"#OPTIONS     +=      -DSINK_STAR_PARTICLES\n");
    fprintf(fp,"#OPTIONS     +=      -DSINK_THRESHOLD_DENSITY=1.e-10 # unit :  g/cm^3\n");
    fprintf(fp,"#OPTIONS     +=      -DSINK_THRESHOLD_DENSITY=1.67e-19 # unit :  g/cm^3 // use for star formation\n");
    fprintf(fp,"#OPTIONS     +=      -DSINK_THRESHOLD_DENSITY=1.67e-14 # unit :  g/cm^3 // use for star formation\n");
    fprintf(fp,"OPTIONS     +=      -DSINK_THRESHOLD_DENSITY=1.67e-12 # unit :  g/cm^3 // use for star formation\n");
    fprintf(fp,"#OPTIONS     +=      -DSINK_GASABSORPTION_THRESHOLD_DENSITY=1.67e-19 # unit :  g/cm^3\n");
    fprintf(fp,"#OPTIONS     +=      -DSINK_GASABSORPTION_THRESHOLD_DENSITY=1.67e-21 # unit :  g/cm^3\n");
    fprintf(fp,"OPTIONS     +=      -DSINK_GASABSORPTION_THRESHOLD_DENSITY=1.67e-15 # unit :  g/cm^3\n");
    fprintf(fp,"#OPTIONS     +=      -DSINKHYDRO_ACCRETION_RADIUS=30*AU_CGS # unit\n");
    fprintf(fp,"OPTIONS     +=      -DSINKHYDRO_ACCRETION_RADIUS=50*AU_CGS # unit\n");
    fprintf(fp,"#OPTIONS     +=      -DSINKHYDRO_ACCRETION_RADIUS=1*AU_CGS # unit\n");
    fprintf(fp,"#OPTIONS     +=      -DSINKHYDRO_ACCRETION_RADIUS=0.1*PC_CGS # unit\n");
    fprintf(fp,"#OPTIONS     +=      -DSINKHYDRO_ACCRETION_RADIUS=5.e+14 # unit\n");
    fprintf(fp,"#OPTIONS     +=      -DSINKSINK_MERGING_DISTANCE=1*AU_CGS  # unit\n");
    fprintf(fp,"OPTIONS     +=      -DSINKSINK_MERGING_DISTANCE=50*AU_CGS  # unit\n");
    fprintf(fp,"#OPTIONS     +=      -DUSE_SINKSINK_MERGING_BOUND_CONDITION # unit\n");
    fprintf(fp,"OPTIONS     +=      -DUSE_SINK_TIMESTEP_LIMITER # Sink time-step limiter.\n");
    fprintf(fp,"OPTIONS     +=      -DSINK_TIMESTEP_MAX_K_LOCAL=3 # Limit dt_sink <= 2^THIS_PARAM * dt_hydro_localmin.\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________Print out logs\n");
    fprintf(fp,"OPTIONS     +=      -DPRINT_LOG_KERNEL_ITERATION\n");
    fprintf(fp,"#OPTIONS     +=      -DPRINT_LOG_DELAYED_FEEDBACK\n");
    fprintf(fp,"OPTIONS     +=      -DPRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT\n");
    fprintf(fp,"#OPTIONS     +=      -DPRINT_LOG_HOLD_RELEASE_GRAPE\n");
    fprintf(fp,"#OPTIONS     +=      -DPRINT_LOG_THIS_STEP\n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#______________________Task list\n");
    fprintf(fp,"#OPTIONS += -DTASK_GALAXY_FORMATION\n");
    fprintf(fp,"#OPTIONS += -DTASK_dSphs\n");
    fprintf(fp,"#OPTIONS += -DTASK_DICE_RUN\n");
    fprintf(fp,"#OPTIONS += -DTASK_AGNTORUS\n");
    fprintf(fp,"OPTIONS += -DTASK_MW\n");
    fprintf(fp,"#OPTIONS += -DTASK_3D_COLLAPSE \n");
    fprintf(fp,"#OPTIONS += -DTASK_KELVINHELMHOLTZ_INSTABILITY\n");
    fprintf(fp,"#OPTIONS += -DTASK_HYDROSTATIC \n");
    fprintf(fp,"#OPTIONS += -DTASK_1D_SHOCKE_TUBE  \n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_HYDRO_QUANTITIES \n");
    fprintf(fp,"\n");
    fprintf(fp,"\n");
    fprintf(fp,"#OPTIONS += -DTASK_TORUS\n");
    fprintf(fp,"#OPTIONS += -DTASK_MERGER # test clear.\n");
    fprintf(fp,"#OPTIONS += -DTASK_NFW\n");
    fprintf(fp,"#OPTIONS += -DTASK_CLOUD_EXPLOSION \n");
    fprintf(fp,"#OPTIONS += -DTASK_BLAST_WAVE       # SPSPH pass\n");
    fprintf(fp,"#OPTIONS += -DTASK_SINUSOIDAL_WAVE\n");
    fprintf(fp,"#OPTIONS += -DTASK_3D_SHOCKE_TUBE\n");
    fprintf(fp,"#OPTIONS += -DTASK_M2_COLLAPSE\n");
    fprintf(fp,"#OPTIONS += -DTASK_TURBULENCE\n");
    fprintf(fp,"#OPTIONS += -DTASK_ROTATINGDISK_WITH_SINK\n");
    fprintf(fp,"#OPTIONS += -DTASK_COLD_COLLAPSE\n");
    fprintf(fp,"#OPTIONS += -DTASK_GALACTIC_CENTER # SPSPH pass\n");
    fprintf(fp,"#OPTIONS += -DTASK_SANTABARBARA # SPSPH pass\n");
    fprintf(fp,"#OPTIONS += -DTASK_1D_TWOFLUIDS \n");
    fprintf(fp,"#OPTIONS += -DTASK_KEPLER\n");
    fprintf(fp,"\n");
    fprintf(fp,"#OPTIONS += -DTASK_MAKE_SMOOTHDISK\n");
    fprintf(fp,"\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_SYMMETRIZED_POTENTIAL_ERROR\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_STELLARFEEDBACK\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_EQUILIBRIUM_TEMPERATURE\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_REINICKE_MEYER_TER_VEHN\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_1D_THERMAL_CONDUCTIVITY\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_3D_THERMAL_CONDUCTIVITY\n");
    fprintf(fp,"\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_HYDROTREE\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_GRAVITYTREE\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_SINKPARTICLE\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_NEIGHBORSEARCH\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_STROMGRENSPHERE\n");
    fprintf(fp,"\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_FOF\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_CDM_NEIGHBOR_SEARCH\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_HYDRO_CHECK_DIRECT_AND_TREE\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_NEIGHBOR_SEARCH_TEST\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_TREE_ODD_DISTRIBUTION\n");
    fprintf(fp,"#OPTIONS += -DTASK_TEST_NEIGHBOR_SEARCH_TEST\n");

    fclose(fp);

    return ;
}
